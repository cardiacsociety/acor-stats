{{ define "query" }}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ACOR Query Report</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/css/materialize.min.css">
</head>
<body>
<div class="container">

    <h1>Query Report</h1>

    <div style="width: 40vw; height: 20vw;">
        <canvas id="chart"></canvas>
    </div>

</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js'></script>
<script>
    $(document).ready(function() {

        //var apiBase = "http://localhost:8080/api/report"
        var api = "{{ .APIBaseURL }}" + "/report/time?" + "{{ .Query }}";
        api = api.replace(/\\\//g, "/");
        //console.log(apiBase);

        /* raw query passed from the web page to the api */
        report({
            api: api,
            target: 'chart',
            // title: 'chart title',
            dataLabel: 'count'
        }, "bar");

    });

    function report(r, type) {

        $.getJSON(r.api, function(res) {
            r.labels = res.labels; // Object.keys(res.data);
            r.values = res.data; // Object.values(res.data);
            r.count = r.values.length;
            r.title = res.title;
            //console.log(r);
            doChart(r, type);
        });
    }

    function doChart(r, chartType) {

        // Set colours according to goodness!
        var bgColours = [];
        var borderColours = [];

        var bgOpacity = 0.4;
        var borderOpacity = 1;

        // Percentile colours
        var clrs = [];
        // Black < 10%
        clrs.push('0, 0, 0');
        // Grey < 20%
        clrs.push('102, 102, 102');
        // purple < 30%
        clrs.push('129, 0, 127');
        // dk blue < 40%
        clrs.push('0, 51, 102');
        // lt blue < 50%
        clrs.push('173, 216, 230');
        // lt green < 60%
        clrs.push('144, 238, 144');
        // dk green < 70%
        clrs.push('1, 50, 32');
        // yellow < 80%
        clrs.push('254, 254, 0');
        // orange < 90%
        clrs.push('255, 165, 0');
        // red < 100%
        clrs.push('238, 0, 0');

        var min = 0;
        var max = Math.max(...r.values);
        var percentileIncrement = max / 10;
        //console.log('Percentile Increment is ' + percentileIncrement);

        for (var i = 0; i < r.count; i++) {
            // in which percentile does the current value live?
            var msg = "value " + r.values[i] + ", max value " + max;
            var percentile = Math.ceil(r.values[i] / percentileIncrement);
            if (percentile < 1) {
                percentile = 1;
            }
            msg += " =  percentile value of " + percentile;
            --percentile; // array key
            msg += " which is clr array key = " + percentile + " with value " + clrs[percentile];

            bgColours[i] = 'rgba(' + clrs[percentile] + ', ' + bgOpacity + ')';
            borderColours[i] = 'rgba(' + clrs[percentile] + ', ' + bgOpacity + ')';

            //console.log(msg);
        }

        var ctx = document.getElementById(r.target);
        new Chart(ctx, {
            type: chartType,
            data: {
                labels: r.labels,
                datasets: [{
                    label: r.dataLabel,
                    data: r.values,
                    backgroundColor: bgColours,
                    borderColor: borderColours,
                    borderWidth: 1
                }
                ]
            },
            options: {
                title: {
                    display: true,
                    text: r.title
                },
                legend: {
                    display: false
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }
</script>
</body>
</html>
{{ end }}